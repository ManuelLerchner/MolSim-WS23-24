// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIMULATION_SCHEMA_PSKEL_HXX
#define SIMULATION_SCHEMA_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
class positionType_pskel;
class gridDimType_pskel;
class velocityType_pskel;
class configuration_pskel;
class cuboid_pskel;

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>

namespace xml_schema {
// Built-in XML Schema types mapping.
//
typedef ::xsd::cxx::parser::string_sequence<char> string_sequence;
typedef ::xsd::cxx::parser::qname<char> qname;
typedef ::xsd::cxx::parser::buffer buffer;
typedef ::xsd::cxx::parser::time_zone time_zone;
typedef ::xsd::cxx::parser::gday gday;
typedef ::xsd::cxx::parser::gmonth gmonth;
typedef ::xsd::cxx::parser::gyear gyear;
typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
typedef ::xsd::cxx::parser::gyear_month gyear_month;
typedef ::xsd::cxx::parser::date date;
typedef ::xsd::cxx::parser::time time;
typedef ::xsd::cxx::parser::date_time date_time;
typedef ::xsd::cxx::parser::duration duration;

// Base parser skeletons.
//
typedef ::xsd::cxx::parser::parser_base<char> parser_base;
typedef ::xsd::cxx::parser::non_validating::empty_content<char> empty_content;
typedef ::xsd::cxx::parser::non_validating::simple_content<char> simple_content;
typedef ::xsd::cxx::parser::non_validating::complex_content<char> complex_content;
typedef ::xsd::cxx::parser::non_validating::list_base<char> list_base;

// Parser skeletons and implementations for the XML Schema
// built-in types.
//
typedef ::xsd::cxx::parser::non_validating::any_type_pskel<char> any_type_pskel;
typedef ::xsd::cxx::parser::non_validating::any_type_pimpl<char> any_type_pimpl;

typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel<char> any_simple_type_pskel;
typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl<char> any_simple_type_pimpl;

typedef ::xsd::cxx::parser::non_validating::byte_pskel<char> byte_pskel;
typedef ::xsd::cxx::parser::non_validating::byte_pimpl<char> byte_pimpl;

typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel<char> unsigned_byte_pskel;
typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl<char> unsigned_byte_pimpl;

typedef ::xsd::cxx::parser::non_validating::short_pskel<char> short_pskel;
typedef ::xsd::cxx::parser::non_validating::short_pimpl<char> short_pimpl;

typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel<char> unsigned_short_pskel;
typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl<char> unsigned_short_pimpl;

typedef ::xsd::cxx::parser::non_validating::int_pskel<char> int_pskel;
typedef ::xsd::cxx::parser::non_validating::int_pimpl<char> int_pimpl;

typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel<char> unsigned_int_pskel;
typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl<char> unsigned_int_pimpl;

typedef ::xsd::cxx::parser::non_validating::long_pskel<char> long_pskel;
typedef ::xsd::cxx::parser::non_validating::long_pimpl<char> long_pimpl;

typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel<char> unsigned_long_pskel;
typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl<char> unsigned_long_pimpl;

typedef ::xsd::cxx::parser::non_validating::integer_pskel<char> integer_pskel;
typedef ::xsd::cxx::parser::non_validating::integer_pimpl<char> integer_pimpl;

typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel<char> non_positive_integer_pskel;
typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl<char> non_positive_integer_pimpl;

typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel<char> non_negative_integer_pskel;
typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl<char> non_negative_integer_pimpl;

typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel<char> positive_integer_pskel;
typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl<char> positive_integer_pimpl;

typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel<char> negative_integer_pskel;
typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl<char> negative_integer_pimpl;

typedef ::xsd::cxx::parser::non_validating::boolean_pskel<char> boolean_pskel;
typedef ::xsd::cxx::parser::non_validating::boolean_pimpl<char> boolean_pimpl;

typedef ::xsd::cxx::parser::non_validating::float_pskel<char> float_pskel;
typedef ::xsd::cxx::parser::non_validating::float_pimpl<char> float_pimpl;

typedef ::xsd::cxx::parser::non_validating::double_pskel<char> double_pskel;
typedef ::xsd::cxx::parser::non_validating::double_pimpl<char> double_pimpl;

typedef ::xsd::cxx::parser::non_validating::decimal_pskel<char> decimal_pskel;
typedef ::xsd::cxx::parser::non_validating::decimal_pimpl<char> decimal_pimpl;

typedef ::xsd::cxx::parser::non_validating::string_pskel<char> string_pskel;
typedef ::xsd::cxx::parser::non_validating::string_pimpl<char> string_pimpl;

typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel<char> normalized_string_pskel;
typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl<char> normalized_string_pimpl;

typedef ::xsd::cxx::parser::non_validating::token_pskel<char> token_pskel;
typedef ::xsd::cxx::parser::non_validating::token_pimpl<char> token_pimpl;

typedef ::xsd::cxx::parser::non_validating::name_pskel<char> name_pskel;
typedef ::xsd::cxx::parser::non_validating::name_pimpl<char> name_pimpl;

typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel<char> nmtoken_pskel;
typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl<char> nmtoken_pimpl;

typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel<char> nmtokens_pskel;
typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl<char> nmtokens_pimpl;

typedef ::xsd::cxx::parser::non_validating::ncname_pskel<char> ncname_pskel;
typedef ::xsd::cxx::parser::non_validating::ncname_pimpl<char> ncname_pimpl;

typedef ::xsd::cxx::parser::non_validating::language_pskel<char> language_pskel;
typedef ::xsd::cxx::parser::non_validating::language_pimpl<char> language_pimpl;

typedef ::xsd::cxx::parser::non_validating::id_pskel<char> id_pskel;
typedef ::xsd::cxx::parser::non_validating::id_pimpl<char> id_pimpl;

typedef ::xsd::cxx::parser::non_validating::idref_pskel<char> idref_pskel;
typedef ::xsd::cxx::parser::non_validating::idref_pimpl<char> idref_pimpl;

typedef ::xsd::cxx::parser::non_validating::idrefs_pskel<char> idrefs_pskel;
typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl<char> idrefs_pimpl;

typedef ::xsd::cxx::parser::non_validating::uri_pskel<char> uri_pskel;
typedef ::xsd::cxx::parser::non_validating::uri_pimpl<char> uri_pimpl;

typedef ::xsd::cxx::parser::non_validating::qname_pskel<char> qname_pskel;
typedef ::xsd::cxx::parser::non_validating::qname_pimpl<char> qname_pimpl;

typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel<char> base64_binary_pskel;
typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl<char> base64_binary_pimpl;

typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel<char> hex_binary_pskel;
typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl<char> hex_binary_pimpl;

typedef ::xsd::cxx::parser::non_validating::date_pskel<char> date_pskel;
typedef ::xsd::cxx::parser::non_validating::date_pimpl<char> date_pimpl;

typedef ::xsd::cxx::parser::non_validating::date_time_pskel<char> date_time_pskel;
typedef ::xsd::cxx::parser::non_validating::date_time_pimpl<char> date_time_pimpl;

typedef ::xsd::cxx::parser::non_validating::duration_pskel<char> duration_pskel;
typedef ::xsd::cxx::parser::non_validating::duration_pimpl<char> duration_pimpl;

typedef ::xsd::cxx::parser::non_validating::gday_pskel<char> gday_pskel;
typedef ::xsd::cxx::parser::non_validating::gday_pimpl<char> gday_pimpl;

typedef ::xsd::cxx::parser::non_validating::gmonth_pskel<char> gmonth_pskel;
typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl<char> gmonth_pimpl;

typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel<char> gmonth_day_pskel;
typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl<char> gmonth_day_pimpl;

typedef ::xsd::cxx::parser::non_validating::gyear_pskel<char> gyear_pskel;
typedef ::xsd::cxx::parser::non_validating::gyear_pimpl<char> gyear_pimpl;

typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel<char> gyear_month_pskel;
typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl<char> gyear_month_pimpl;

typedef ::xsd::cxx::parser::non_validating::time_pskel<char> time_pskel;
typedef ::xsd::cxx::parser::non_validating::time_pimpl<char> time_pimpl;

// Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
//
typedef ::xsd::cxx::parser::exception<char> exception;

// Parsing diagnostics.
//
typedef ::xsd::cxx::parser::severity severity;
typedef ::xsd::cxx::parser::error<char> error;
typedef ::xsd::cxx::parser::diagnostics<char> diagnostics;
typedef ::xsd::cxx::parser::parsing<char> parsing;

// Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
//
typedef ::xsd::cxx::xml::error_handler<char> error_handler;

// Read-only string.
//
typedef ::xsd::cxx::ro_string<char> ro_string;

// Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
// for details.
//
typedef ::xsd::cxx::parser::xerces::flags flags;

// Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
// for details.
//
typedef ::xsd::cxx::parser::xerces::properties<char> properties;

// Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
// for details.
//
typedef ::xsd::cxx::parser::xerces::document<char> document;
}  // namespace xml_schema

class positionType_pskel : public ::xml_schema::complex_content {
   public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void x(double);

    virtual void y(double);

    virtual void z(double);

    virtual void post_positionType();

    // Parser construction API.
    //
    void x_parser(::xml_schema::decimal_pskel&);

    void y_parser(::xml_schema::decimal_pskel&);

    void z_parser(::xml_schema::decimal_pskel&);

    void parsers(::xml_schema::decimal_pskel& /* x */, ::xml_schema::decimal_pskel& /* y */, ::xml_schema::decimal_pskel& /* z */);

    // Constructor.
    //
    positionType_pskel();

    // Implementation.
    //
   protected:
    virtual bool _start_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&, const ::xml_schema::ro_string*);

    virtual bool _end_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&);

   protected:
    ::xml_schema::decimal_pskel* x_parser_;
    ::xml_schema::decimal_pskel* y_parser_;
    ::xml_schema::decimal_pskel* z_parser_;
};

class gridDimType_pskel : public ::xml_schema::complex_content {
   public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void dimx(long long);

    virtual void dimy(long long);

    virtual void dimz(long long);

    virtual void post_gridDimType();

    // Parser construction API.
    //
    void dimx_parser(::xml_schema::integer_pskel&);

    void dimy_parser(::xml_schema::integer_pskel&);

    void dimz_parser(::xml_schema::integer_pskel&);

    void parsers(::xml_schema::integer_pskel& /* dimx */, ::xml_schema::integer_pskel& /* dimy */, ::xml_schema::integer_pskel& /* dimz */);

    // Constructor.
    //
    gridDimType_pskel();

    // Implementation.
    //
   protected:
    virtual bool _start_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&, const ::xml_schema::ro_string*);

    virtual bool _end_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&);

   protected:
    ::xml_schema::integer_pskel* dimx_parser_;
    ::xml_schema::integer_pskel* dimy_parser_;
    ::xml_schema::integer_pskel* dimz_parser_;
};

class velocityType_pskel : public ::xml_schema::complex_content {
   public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void x(double);

    virtual void y(double);

    virtual void z(double);

    virtual void post_velocityType();

    // Parser construction API.
    //
    void x_parser(::xml_schema::decimal_pskel&);

    void y_parser(::xml_schema::decimal_pskel&);

    void z_parser(::xml_schema::decimal_pskel&);

    void parsers(::xml_schema::decimal_pskel& /* x */, ::xml_schema::decimal_pskel& /* y */, ::xml_schema::decimal_pskel& /* z */);

    // Constructor.
    //
    velocityType_pskel();

    // Implementation.
    //
   protected:
    virtual bool _start_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&, const ::xml_schema::ro_string*);

    virtual bool _end_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&);

   protected:
    ::xml_schema::decimal_pskel* x_parser_;
    ::xml_schema::decimal_pskel* y_parser_;
    ::xml_schema::decimal_pskel* z_parser_;
};

class configuration_pskel : public ::xml_schema::complex_content {
   public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void fps(long long);

    virtual void video_length(long long);

    virtual void delta_t(double);

    virtual void end_time(double);

    virtual void cuboid();

    virtual void post_configuration();

    // Parser construction API.
    //
    void fps_parser(::xml_schema::integer_pskel&);

    void video_length_parser(::xml_schema::integer_pskel&);

    void delta_t_parser(::xml_schema::decimal_pskel&);

    void end_time_parser(::xml_schema::decimal_pskel&);

    void cuboid_parser(::cuboid_pskel&);

    void parsers(::xml_schema::integer_pskel& /* fps */, ::xml_schema::integer_pskel& /* video_length */,
                 ::xml_schema::decimal_pskel& /* delta_t */, ::xml_schema::decimal_pskel& /* end_time */, ::cuboid_pskel& /* cuboid */);

    // Constructor.
    //
    configuration_pskel();

    // Implementation.
    //
   protected:
    virtual bool _start_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&, const ::xml_schema::ro_string*);

    virtual bool _end_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&);

   protected:
    ::xml_schema::integer_pskel* fps_parser_;
    ::xml_schema::integer_pskel* video_length_parser_;
    ::xml_schema::decimal_pskel* delta_t_parser_;
    ::xml_schema::decimal_pskel* end_time_parser_;
    ::cuboid_pskel* cuboid_parser_;
};

class cuboid_pskel : public ::xml_schema::complex_content {
   public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void position();

    virtual void grid_dim();

    virtual void grid_spacing(double);

    virtual void temperature(double);

    virtual void mass(double);

    virtual void velocity();

    virtual void type(long long);

    virtual void post_cuboid();

    // Parser construction API.
    //
    void position_parser(::positionType_pskel&);

    void grid_dim_parser(::gridDimType_pskel&);

    void grid_spacing_parser(::xml_schema::decimal_pskel&);

    void temperature_parser(::xml_schema::decimal_pskel&);

    void mass_parser(::xml_schema::decimal_pskel&);

    void velocity_parser(::velocityType_pskel&);

    void type_parser(::xml_schema::integer_pskel&);

    void parsers(::positionType_pskel& /* position */, ::gridDimType_pskel& /* grid_dim */, ::xml_schema::decimal_pskel& /* grid_spacing */,
                 ::xml_schema::decimal_pskel& /* temperature */, ::xml_schema::decimal_pskel& /* mass */,
                 ::velocityType_pskel& /* velocity */, ::xml_schema::integer_pskel& /* type */);

    // Constructor.
    //
    cuboid_pskel();

    // Implementation.
    //
   protected:
    virtual bool _start_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&, const ::xml_schema::ro_string*);

    virtual bool _end_element_impl(const ::xml_schema::ro_string&, const ::xml_schema::ro_string&);

   protected:
    ::positionType_pskel* position_parser_;
    ::gridDimType_pskel* grid_dim_parser_;
    ::xml_schema::decimal_pskel* grid_spacing_parser_;
    ::xml_schema::decimal_pskel* temperature_parser_;
    ::xml_schema::decimal_pskel* mass_parser_;
    ::velocityType_pskel* velocity_parser_;
    ::xml_schema::integer_pskel* type_parser_;
};

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif  // SIMULATION_SCHEMA_PSKEL_HXX
