// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "simulation_schema-pimpl.h"

#include <iostream>

// positionType_pimpl
//

void positionType_pimpl::pre() {}

void positionType_pimpl::x(double x) { std::cout << "x: " << x << std::endl; }

void positionType_pimpl::y(double y) { std::cout << "y: " << y << std::endl; }

void positionType_pimpl::z(double z) { std::cout << "z: " << z << std::endl; }

void positionType_pimpl::post_positionType() {}

// gridDimType_pimpl
//

void gridDimType_pimpl::pre() {}

void gridDimType_pimpl::dimx(long long dimx) { std::cout << "dimx: " << dimx << std::endl; }

void gridDimType_pimpl::dimy(long long dimy) { std::cout << "dimy: " << dimy << std::endl; }

void gridDimType_pimpl::dimz(long long dimz) { std::cout << "dimz: " << dimz << std::endl; }

void gridDimType_pimpl::post_gridDimType() {}

// velocityType_pimpl
//

void velocityType_pimpl::pre() {}

void velocityType_pimpl::x(double x) { std::cout << "x: " << x << std::endl; }

void velocityType_pimpl::y(double y) { std::cout << "y: " << y << std::endl; }

void velocityType_pimpl::z(double z) { std::cout << "z: " << z << std::endl; }

void velocityType_pimpl::post_velocityType() {}

// configuration_pimpl
//

void configuration_pimpl::pre() {}

void configuration_pimpl::fps(long long fps) { std::cout << "fps: " << fps << std::endl; }

void configuration_pimpl::video_length(long long video_length) { std::cout << "video_length: " << video_length << std::endl; }

void configuration_pimpl::delta_t(double delta_t) { std::cout << "delta_t: " << delta_t << std::endl; }

void configuration_pimpl::end_time(double end_time) { std::cout << "end_time: " << end_time << std::endl; }

void configuration_pimpl::cuboid() {}

void configuration_pimpl::post_configuration() {}

// cuboid_pimpl
//

void cuboid_pimpl::pre() {}

void cuboid_pimpl::position() {}

void cuboid_pimpl::grid_dim() {}

void cuboid_pimpl::grid_spacing(double grid_spacing) { std::cout << "grid_spacing: " << grid_spacing << std::endl; }

void cuboid_pimpl::temperature(double temperature) { std::cout << "temperature: " << temperature << std::endl; }

void cuboid_pimpl::mass(double mass) { std::cout << "mass: " << mass << std::endl; }

void cuboid_pimpl::velocity() {}

void cuboid_pimpl::type(long long type) { std::cout << "type: " << type << std::endl; }

void cuboid_pimpl::post_cuboid() {}
